// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// DATABASE_URL="mysql://root:2MXqVys7UamyAzuP8yBRo8rqMPFcbSMV@y0p0ti.stackhero-network.com:4985/root?sslaccept=strict"
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//MODEL
model User {
  userId                   String                     @id @default(uuid())
  firstName                String?
  lastName                 String?
  email                    String?                    @unique
  address                  String?
  phoneNumber              String?
  role                     Role?                      @relation(fields: [roleId], references: [roleId])
  roleId                   String?
  status                   Int?
  community                String?
  state                    String?
  localGovernmentArea      String?
  password                 String?
  createAt                 DateTime?                  @default(now())
  updateAt                 DateTime?                  @default(now())
  profilePic               Bytes?
  profilePicMimeType       String?
  trusts                   String?
  trust                    Trust[]
  trustEstablishmentStatus TrustEstablishmentStatus[]
  conflict                 Conflict[]

  @@map("users")
}

model Role {
  roleId    String  @id @default(uuid())
  roleName  String?
  roleOrder Int?
  users     User[]

  @@map("role")
}

model Settlor {
  settlorId          String  @id @default(uuid())
  settlorName        String?
  omlCode            String? @unique
  contactName        String?
  contactEmail       String?
  contactPhoneNumber String?
  trust              Trust[]

  @@map("settlor")
}

model Trust {
  trustId                               String                         @id @default(uuid())
  trustName                             String                         @unique
  settlor                               Settlor?                       @relation(fields: [settlorId], references: [settlorId])
  nameOfOmls                            String?
  settlorId                             String?
  user                                  User?                          @relation(fields: [userId], references: [userId])
  userId                                String?
  country                               String?
  state                                 String?
  localGovernmentArea                   String?
  trustCommunities                      String?
  totalMaleBotMembers                   Int?
  totalFemaleBotMembers                 Int?
  totalPwdBotMembers                    Int?
  totalMaleAdvisoryCommitteeMembers     Int?
  totalFemaleAdvisoryCommitteeMembers   Int?
  totalPwdAdvisoryCommitteeMembers      Int?
  totalMaleManagementCommitteeMembers   Int?
  totalFemaleManagementCommitteeMembers Int?
  totalPwdManagementCommitteeMembers    Int?
  createAt                              DateTime?                      @default(now())
  updateAt                              DateTime?                      @default(now())
  botDetails                            BotDetails[]
  trustEstablishmentStatus              TrustEstablishmentStatus[]
  project                               Project[]
  averageCommunitySatisfaction          AverageCommunitySatisfaction[]
  economicImpact                        EconomicImpact[]

  @@map("trust")
}

model BotDetails {
  botDetailsId String  @id @default(uuid())
  firstName    String?
  lastName     String?
  email        String?
  phoneNumber  String?
  trust        Trust   @relation(fields: [trustId], references: [trustId])
  trustId      String

  @@map("botdetails")
}

//Trust Management

model TrustEstablishmentStatus {
  trustEstablishmentStatusId                   String                   @id @default(uuid())
  trustRegisteredWithCAC                       Int?
  cscDocument                                  Bytes?
  cscDocumentMimeType                          String?
  yearIncorporated                             Int?
  botConstitutedAndInaugurated                 Int?
  managementCommitteeConstitutedAndInaugurated Int?
  advisoryCommitteeConstitutedAndInaugurated   Int?
  isTrustDevelopmentPlanReadilyAvailable       Int?
  isTrustDevelopmentPlanBudgetReadilyAvailable Int?
  yearDeveloped                                Int?
  yearExpired                                  Int?
  developmentPlanDocument                      Bytes?
  developmentPlanDocumentMimeType              String?
  developmentPlanBudgetDocument                Bytes?
  developmentPlanBudgetDocumentMimeType        String?
  yearOfFundsReceivedByTrust                   Int?
  totalFundsReceivedByTrust                    Int?
  capitalExpenditure                           Int?
  reserve                                      Int?
  user                                         User?                    @relation(fields: [admin], references: [userId])
  admin                                        String?
  yearOfNeedsAssessment                        Int?
  statusOfNeedAssessment                       Int?
  communityWomenConsulted                      Int?
  pwDsConsulted                                Int?
  communityYouthsConsulted                     Int?
  communityLeadershipConsulted                 Int?
  attendanceSheet                              Int?
  distributionMatrixDevelopedBySettlor         Boolean?
  trustDistributionMatrixDocument              Bytes?
  trustDistributionMatrixDocumentMimeType      String?
  operationalExpenditure                       OperationalExpenditure[]
  trust                                        Trust?                   @relation(fields: [trustId], references: [trustId])
  trustId                                      String?                  @unique
  createAt                                     DateTime?                @default(now())
  updateAt                                     DateTime?                @default(now())

  @@map("trustestablishmentstatus")
}

model OperationalExpenditure {
  OperationalExpenditureId          String                    @id @default(uuid())
  settlorOperationalExpenditureYear Int?
  settlorOperationalExpenditure     Int?
  trustEstablishmentStatus          TrustEstablishmentStatus? @relation(fields: [trustEstablishmentStatusId], references: [trustEstablishmentStatusId])
  trustEstablishmentStatusId        String?

  @@map("operationalexpenditure")
}

model Project {
  projectId                             String           @id @default(uuid())
  projectTitle                          String           @unique
  projectCategory                       ProjectCategory? @relation(fields: [projectCategoryId], references: [projectCategoryId])
  projectCategoryId                     Int?
  totalBudget                           Int?
  community                             String?
  awardDate                             DateTime?
  nameOfContractor                      String?
  annualApprovedBudget                  String?
  statusReport                          StatusReport?    @relation(fields: [projectStatus], references: [statusReportId])
  projectStatus                         Int?
  qualityRating                         QualityRating?   @relation(fields: [qualityRatingId], references: [qualityRatingId])
  qualityRatingId                       Int?
  projectVideo                          Bytes?
  projectVideoMimeType                  String?
  numberOfMaleEmployedByContractor      Int?
  numberOfFemaleEmployedByContractor    Int?
  numberOfPwDsEmployedByContractor      Int?
  typeOfWork                            String?
  numberOfHostCommunityMemberContracted Int?
  numberOfMaleBenefited                 Int?
  numberOfFemaleBenefited               Int?
  numberOfPwDsBenefited                 Int?
  trust                                 Trust?           @relation(fields: [trustId], references: [trustId])
  trustId                               String?
  createAt                              DateTime?        @default(now())
  updateAt                              DateTime?        @default(now())
  conflict                              Conflict[]

  @@map("project")
}

model ProjectCategory {
  projectCategoryId Int       @id @default(autoincrement())
  categoryName      String?
  project           Project[]

  @@map("projectcategory")
}

model QualityRating {
  qualityRatingId Int       @id @default(autoincrement())
  qualityRating   String?
  project         Project[]

  @@map("qualityrating")
}

model StatusReport {
  statusReportId Int       @id @default(autoincrement())
  statusReport   String?
  project        Project[]

  @@map("statusreport")
}

model TypeOfWork {
  typeOfWorkId Int     @id @default(autoincrement())
  typeOfWork   String?

  @@map("typeofwork")
}

model Conflict {
  conflictId              String                 @id @default(uuid())
  project                 Project?               @relation(fields: [projectId], references: [projectId])
  projectId               String?
  user                    User?                  @relation(fields: [userId], references: [userId])
  userId                  String?
  causeOfConflict         CauseOfConflict?       @relation(fields: [causeOfConflictId], references: [causeOfConflictId])
  causeOfConflictId       Int?
  partiesInvolve          PartiesInvolve?        @relation(fields: [partiesInvolveId], references: [partiesInvolveId])
  partiesInvolveId        Int?
  narrateIssues           String?
  conflictStatus          ConflictStatus?        @relation(fields: [conflictStatusId], references: [conflictStatusId])
  conflictStatusId        Int?
  issuesAddressBy         IssuesAddressBy?       @relation(fields: [issuesAddressById], references: [issuesAddressById])
  issuesAddressById       Int?
  courtLitigationStatus   CourtLitigationStatus? @relation(fields: [courtLitigationStatusId], references: [courtLitigationStatusId])
  courtLitigationStatusId Int?
  createAt                DateTime?              @default(now())
  updateAt                DateTime?              @default(now())

  @@map("conflict")
}

model CauseOfConflict {
  causeOfConflictId Int        @id @default(autoincrement())
  causeOfConflict   String?
  conflict          Conflict[]

  @@map("causeofconflict")
}

model PartiesInvolve {
  partiesInvolveId Int        @id @default(autoincrement())
  partiesInvolve   String?
  conflict         Conflict[]

  @@map("partiesinvolve")
}

model ConflictStatus {
  conflictStatusId Int        @id @default(autoincrement())
  conflictStatus   String?
  conflict         Conflict[]

  @@map("conflictstatus")
}

model IssuesAddressBy {
  issuesAddressById Int        @id @default(autoincrement())
  issuesAddressBy   String?
  conflict          Conflict[]

  @@map("issuesaddressby")
}

model CourtLitigationStatus {
  courtLitigationStatusId Int        @id @default(autoincrement())
  courtLitigationStatus   String?
  conflict                Conflict[]

  @@map("courtlitigationstatus")
}

model AverageCommunitySatisfaction {
  averageCommunitySatisfactionId String  @id @default(uuid())
  infoProjects                   Int?
  communityConsult               Int?
  localParticipation             Int?
  reportMechanism                Int?
  conflictMinimization           Int?
  projectHandover                Int?
  maintenanceConsult             Int?
  incomeProject                  Int?
  trust                          Trust?  @relation(fields: [trustId], references: [trustId])
  trustId                        String?

  @@map("averagecommunitysatisfaction")
}

model AcsOptionOne {
  acsOptionOneId Int    @id @default(autoincrement())
  acsOptionOne   String

  @@map("acsoptionone")
}

model AcsOptionTwo {
  acsOptionTwoId Int    @id @default(autoincrement())
  acsOptionTwo   String

  @@map("acsoptiontwo")
}

model EconomicImpact {
  economicImpactId  String  @id @default(uuid())
  businessGrowth    Int?
  incomeIncrease    Int?
  livelihoodImprove Int?
  accessAmenities   Int?
  trust             Trust?  @relation(fields: [trustId], references: [trustId])
  trustId           String?
}

model ImpactOptionOne {
  impactOptionOneId Int    @id @default(autoincrement())
  impactOptionOne   String
}

model ImpactOptionTwo {
  impactOptionTwoId Int    @id @default(autoincrement())
  impactOptionTwo   String
}

//Views will be ignored during migration
